* Initialization
** start/close interface
*** line highlighting start
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
*** tool close
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
*** menu close
#+BEGIN_SRC emacs-lisp
  ;;(menu-bar-mode -1)
#+END_SRC
*** scroll close
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
*** startup-message close
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** ring close
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
*** desktop-restore close
#+BEGIN_SRC emacs-lisp
  (setq desktop-restore-frames nil)
#+END_SRC
** hotkey
*** y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** config edit/reload
**** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/CommonConfig.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
**** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/CommonConfig.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
*** terminal
#+BEGIN_SRC emacs-lisp
  (defvar default-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list default-term-shell)))
  (ad-activate 'ansi-term)
  ;;(defvar my-term-shell "/bin/bash")
  ;;(defadvice ansi-term (before force-bash)
  ;;  (interactive (list my-term-shell)))
  ;;(ad-activate 'ansi-term)
#+END_SRC
** org mode config
*** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org window switch config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** org structure template added common hotkey
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("n" "#+NAME: ?"))
  (add-to-list 'org-structure-template-alist '("sel" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** ido config
*** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode t)
#+END_SRC
*** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
*** switch buffer
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (defalias 'list-buffers 'ibuffer)
#+END_SRC
** tabbar config
#+BEGIN_SRC emacs-lisp
  (use-package tabbar
    :ensure t
    :config
    (tabbar-mode 1))
#+END_SRC
** window move
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC
* emacs-lisp procedures config
** electric auto
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              ))
  (electric-pair-mode t)
#+END_SRC
** which-key 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* common package config
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("<f6>" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))   
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
  ;;    (global-set-key "\C-s" 'swiper)
  ;;    (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;;    (global-set-key (kbd "<f6>") 'ivy-resume)
  ;;  (global-set-key (kbd "M-x") 'counsel-M-x)
  ;;    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;;   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;;    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;;    (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;;   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;;    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;;    (global-set-key (kbd "C-c g") 'counsel-git)
  ;;    (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;;    (global-set-key (kbd "C-c k") 'counsel-ag)
  ;;   (global-set-key (kbd "C-x l") 'counsel-locate)
  ;;    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  ))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (elpy-enable))
#+END_SRC
** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-auto-save t))
#+END_SRC
** reftex
#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :ensure t
    :defer t
    :config
    (setq reftex-cite-prompt-optional-args t))
#+END_SRC
** company-auctex
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t
    :init (company-auctex-init))
#+END_SRC
** auctex-latexmk
   #+BEGIN_SRC emacs-lisp
     (use-package auctex-latexmk
       :ensure t
       :config 
       (auctex-latexmk-setup)
       (setq auctex-latexmk-inherit-TeX-PDF-mode t))
   #+END_SRC
** tex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config (progn
	      (setq TeX-source-correlate-mode t)
	      (setq TeX-source-correlate-method 'synctex)
	      (setq TeX-auto-save t)
	      (setq TeX-parse-self t)
	      (setq-default TeX-master "paper.tex")
	      (setq reftex-plug-into-AUCTeX t)
	      (pdf-tools-install)
	      (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		    TeX-source-correlate-start-server t)
	      ;; Update PDF buffers after successful LaTeX runs
	      (add-hook 'TeX-after-compilation-finished-functions
			#'TeX-revert-document-buffer)
	      (add-hook 'LaTeX-mode-hook
			(lambda ()
			  (reftex-mode t)
			  (flyspell-mode t)))))
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
    (add-hook 'pdf-view-mode-hook (lambda () (bms/pdf-midnite-amber))))
#+END_SRC
** auto-dictionary
#+BEGIN_SRC emacs-lisp
  (use-package auto-dictionary
    :ensure t
    :init (add-hook 'flyspell-mode-hook (lambda() (auto-dictionary-mode 1))))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    :config 
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
** jedi
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook (add-to-list 'company-backends 'company-jedi)))
#+END_SRC
** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (yas-global-mode 1)
    :config
    (progn
      (setq elpy-rpc-python-command "python3")
      (setq python-shell-interpreter "python3")
      (remove-hook 'elpy-modules 'elpy-module-flymake)))
#+END_SRC
** git
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :init
      (progn
      (bind-key "C-x g" 'magit-status)
      ))
  (setq magit-status-margin
        '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
#+END_SRC
*** git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
      :ensure t
      :init
      (global-git-gutter-mode +1))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC
